{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"MlopsProject","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyMSjceN66luKV2JEWRNxn+s"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"e_smfRDbCBS4","colab_type":"text"},"source":["### **Import All The Necessary Libraries Required**"]},{"cell_type":"code","metadata":{"id":"1F0qzq69BzN_","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1599323631684,"user_tz":-330,"elapsed":1476,"user":{"displayName":"arsh mishra","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi6u-XxOydpFVOKETbPwJ5auNShlo3a9og96q40Gg=s64","userId":"09593729885082878629"}}},"source":["import sys, os\n","import pandas as pd\n","import numpy as np\n","\n","from keras.models import Sequential\n","from keras.layers import Dense, Dropout, Activation, Flatten\n","from keras.layers import Conv2D, MaxPooling2D, BatchNormalization,AveragePooling2D\n","from keras.losses import categorical_crossentropy\n","from keras.optimizers import Adam\n","from keras.regularizers import l2\n","from keras.utils import np_utils"],"execution_count":5,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Hbys5zTdEDjl","colab_type":"text"},"source":["# **Load The Dataset**"]},{"cell_type":"code","metadata":{"id":"GJGT-VUDERtw","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":355},"executionInfo":{"status":"ok","timestamp":1599323726113,"user_tz":-330,"elapsed":1393,"user":{"displayName":"arsh mishra","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi6u-XxOydpFVOKETbPwJ5auNShlo3a9og96q40Gg=s64","userId":"09593729885082878629"}},"outputId":"9f639570-b82b-403a-8c25-9422edf7746d"},"source":["df=pd.read_csv('/content/fer2013.csv')\n","print(df.info())\n","print(df[\"Usage\"].value_counts())\n","\n","print(df.head())"],"execution_count":6,"outputs":[{"output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 1122 entries, 0 to 1121\n","Data columns (total 3 columns):\n"," #   Column   Non-Null Count  Dtype \n","---  ------   --------------  ----- \n"," 0   emotion  1122 non-null   int64 \n"," 1   pixels   1122 non-null   object\n"," 2   Usage    1121 non-null   object\n","dtypes: int64(1), object(2)\n","memory usage: 26.4+ KB\n","None\n","Training    1121\n","Name: Usage, dtype: int64\n","   emotion                                             pixels     Usage\n","0        0  70 80 82 72 58 58 60 63 54 58 60 48 89 115 121...  Training\n","1        0  151 150 147 155 148 133 111 140 170 174 182 15...  Training\n","2        2  231 212 156 164 174 138 161 173 182 200 106 38...  Training\n","3        4  24 32 36 30 32 23 19 20 30 41 21 22 32 34 21 1...  Training\n","4        6  4 0 0 0 0 0 0 0 0 0 0 0 3 15 23 28 48 50 58 84...  Training\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Ut2UmW-rEqIC","colab_type":"text"},"source":["# **Splitting the Dataset into train and test** "]},{"cell_type":"code","metadata":{"id":"20nhxvnmE4Cz","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":88},"executionInfo":{"status":"ok","timestamp":1599323792515,"user_tz":-330,"elapsed":1990,"user":{"displayName":"arsh mishra","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi6u-XxOydpFVOKETbPwJ5auNShlo3a9og96q40Gg=s64","userId":"09593729885082878629"}},"outputId":"276c6d76-3a6d-4108-c1eb-21573860828c"},"source":["X_train,train_y,X_test,test_y=[],[],[],[]\n","\n","for index, row in df.iterrows():\n","    val=row['pixels'].split(\" \")\n","    try:\n","        if 'Training' in row['Usage']:\n","           X_train.append(np.array(val,'float32'))\n","           train_y.append(row['emotion'])\n","        elif 'PublicTest' in row['Usage']:\n","           X_test.append(np.array(val,'float32'))\n","           test_y.append(row['emotion'])\n","    except:\n","        print(f\"error occured at index :{index} and row:{row}\")"],"execution_count":7,"outputs":[{"output_type":"stream","text":["error occured at index :1121 and row:emotion                                                    3\n","pixels     250 255 211 39 19 20 18 17 22 36 52 69 103 140...\n","Usage                                                    NaN\n","Name: 1121, dtype: object\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"mPu86O3TE_iZ","colab_type":"text"},"source":["# **Defining the variables**"]},{"cell_type":"code","metadata":{"id":"FW2lcl5xFPJK","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1599324124235,"user_tz":-330,"elapsed":2121,"user":{"displayName":"arsh mishra","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi6u-XxOydpFVOKETbPwJ5auNShlo3a9og96q40Gg=s64","userId":"09593729885082878629"}}},"source":["num_features = 64\n","num_labels = 7\n","batch_size = 64\n","epochs = 500\n","width, height = 48, 48"],"execution_count":8,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"8nHX3SvGFScD","colab_type":"text"},"source":["# **Dataset Preprocessing**"]},{"cell_type":"code","metadata":{"id":"uMkuUT8UFZAg","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":195},"executionInfo":{"status":"ok","timestamp":1599324161203,"user_tz":-330,"elapsed":1418,"user":{"displayName":"arsh mishra","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi6u-XxOydpFVOKETbPwJ5auNShlo3a9og96q40Gg=s64","userId":"09593729885082878629"}},"outputId":"6fc0b42a-bb92-410c-ea05-8e1971a27486"},"source":["X_train = np.array(X_train,'float32')\n","train_y = np.array(train_y,'float32')\n","X_test = np.array(X_test,'float32')\n","test_y = np.array(test_y,'float32')\n","\n","train_y=np_utils.to_categorical(train_y, num_classes=num_labels)\n","test_y=np_utils.to_categorical(test_y, num_classes=num_labels)\n","\n","#cannot produce\n","#normalizing data between oand 1\n","X_train -= np.mean(X_train, axis=0)\n","X_train /= np.std(X_train, axis=0)\n","\n","X_test -= np.mean(X_test, axis=0)\n","X_test /= np.std(X_test, axis=0)\n","\n","X_train = X_train.reshape(X_train.shape[0], 48, 48, 1)\n","\n","X_test = X_test.reshape(X_test.shape[0], 48, 48, 1)"],"execution_count":9,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/numpy/core/fromnumeric.py:3335: RuntimeWarning: Mean of empty slice.\n","  out=out, **kwargs)\n","/usr/local/lib/python3.6/dist-packages/numpy/core/_methods.py:161: RuntimeWarning: invalid value encountered in true_divide\n","  ret = ret.dtype.type(ret / rcount)\n","/usr/local/lib/python3.6/dist-packages/numpy/core/_methods.py:217: RuntimeWarning: Degrees of freedom <= 0 for slice\n","  keepdims=keepdims)\n","/usr/local/lib/python3.6/dist-packages/numpy/core/_methods.py:186: RuntimeWarning: invalid value encountered in true_divide\n","  arrmean, rcount, out=arrmean, casting='unsafe', subok=False)\n","/usr/local/lib/python3.6/dist-packages/numpy/core/_methods.py:209: RuntimeWarning: invalid value encountered in true_divide\n","  ret = ret.dtype.type(ret / rcount)\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"6Izl2XSqFiYU","colab_type":"text"},"source":["# **Create Model**"]},{"cell_type":"code","metadata":{"id":"xxYCYj_nFqhW","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1599324219012,"user_tz":-330,"elapsed":2485,"user":{"displayName":"arsh mishra","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi6u-XxOydpFVOKETbPwJ5auNShlo3a9og96q40Gg=s64","userId":"09593729885082878629"}}},"source":["model = Sequential()"],"execution_count":10,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"QlQIVbMPFvtv","colab_type":"text"},"source":["# **Adding the layers**"]},{"cell_type":"code","metadata":{"id":"pCGRwPWoF2ls","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1599324272601,"user_tz":-330,"elapsed":1934,"user":{"displayName":"arsh mishra","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi6u-XxOydpFVOKETbPwJ5auNShlo3a9og96q40Gg=s64","userId":"09593729885082878629"}}},"source":["model.add(Conv2D(64, kernel_size=(3, 3), activation='relu', input_shape=(X_train.shape[1:])))\n","model.add(Conv2D(64,kernel_size= (3, 3), activation='relu'))\n","\n","model.add(MaxPooling2D(pool_size=(2,2), strides=(2, 2)))\n","model.add(Dropout(0.5))\n","\n","#2nd convolution layer\n","model.add(Conv2D(64, (3, 3), activation='relu'))\n","model.add(Conv2D(64, (3, 3), activation='relu'))\n","\n","model.add(MaxPooling2D(pool_size=(2,2), strides=(2, 2)))\n","model.add(Dropout(0.5))\n","\n","#3rd convolution layer\n","model.add(Conv2D(128, (3, 3), activation='relu'))\n","model.add(Conv2D(128, (3, 3), activation='relu'))\n","\n","model.add(MaxPooling2D(pool_size=(2,2), strides=(2, 2)))\n","\n","model.add(Flatten())\n","\n","#fully connected neural networks\n","model.add(Dense(1024, activation='relu'))\n","model.add(Dropout(0.2))\n","model.add(Dense(1024, activation='relu'))\n","model.add(Dropout(0.2))\n","\n","model.add(Dense(num_labels, activation='softmax'))"],"execution_count":11,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"tY3Hiza-GPAx","colab_type":"text"},"source":["# **Summary of the model**"]},{"cell_type":"code","metadata":{"id":"6yyTMa47GU7H","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":764},"executionInfo":{"status":"ok","timestamp":1599324352410,"user_tz":-330,"elapsed":2499,"user":{"displayName":"arsh mishra","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi6u-XxOydpFVOKETbPwJ5auNShlo3a9og96q40Gg=s64","userId":"09593729885082878629"}},"outputId":"d7134608-d47d-4f67-b5ef-013032bd3b9b"},"source":["model.summary()"],"execution_count":12,"outputs":[{"output_type":"stream","text":["Model: \"sequential_3\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","conv2d_18 (Conv2D)           (None, 46, 46, 64)        640       \n","_________________________________________________________________\n","conv2d_19 (Conv2D)           (None, 44, 44, 64)        36928     \n","_________________________________________________________________\n","max_pooling2d_9 (MaxPooling2 (None, 22, 22, 64)        0         \n","_________________________________________________________________\n","dropout_12 (Dropout)         (None, 22, 22, 64)        0         \n","_________________________________________________________________\n","conv2d_20 (Conv2D)           (None, 20, 20, 64)        36928     \n","_________________________________________________________________\n","conv2d_21 (Conv2D)           (None, 18, 18, 64)        36928     \n","_________________________________________________________________\n","max_pooling2d_10 (MaxPooling (None, 9, 9, 64)          0         \n","_________________________________________________________________\n","dropout_13 (Dropout)         (None, 9, 9, 64)          0         \n","_________________________________________________________________\n","conv2d_22 (Conv2D)           (None, 7, 7, 128)         73856     \n","_________________________________________________________________\n","conv2d_23 (Conv2D)           (None, 5, 5, 128)         147584    \n","_________________________________________________________________\n","max_pooling2d_11 (MaxPooling (None, 2, 2, 128)         0         \n","_________________________________________________________________\n","flatten_3 (Flatten)          (None, 512)               0         \n","_________________________________________________________________\n","dense_9 (Dense)              (None, 1024)              525312    \n","_________________________________________________________________\n","dropout_14 (Dropout)         (None, 1024)              0         \n","_________________________________________________________________\n","dense_10 (Dense)             (None, 1024)              1049600   \n","_________________________________________________________________\n","dropout_15 (Dropout)         (None, 1024)              0         \n","_________________________________________________________________\n","dense_11 (Dense)             (None, 7)                 7175      \n","=================================================================\n","Total params: 1,914,951\n","Trainable params: 1,914,951\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"OOy_wQ9uGaxH","colab_type":"text"},"source":["# **Compile the Model**"]},{"cell_type":"code","metadata":{"id":"SEWiBKbWGiML","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1599324437821,"user_tz":-330,"elapsed":1600,"user":{"displayName":"arsh mishra","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi6u-XxOydpFVOKETbPwJ5auNShlo3a9og96q40Gg=s64","userId":"09593729885082878629"}}},"source":["model.compile(loss=categorical_crossentropy,\n","              optimizer=Adam(),\n","              metrics=['accuracy'])"],"execution_count":13,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rsnSGwSLGnL1","colab_type":"text"},"source":["# **Training The Model**"]},{"cell_type":"code","metadata":{"id":"QMFG0X7xGtI-","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":566},"executionInfo":{"status":"error","timestamp":1599324646343,"user_tz":-330,"elapsed":103583,"user":{"displayName":"arsh mishra","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi6u-XxOydpFVOKETbPwJ5auNShlo3a9og96q40Gg=s64","userId":"09593729885082878629"}},"outputId":"8118e252-9074-4d21-96dd-3ac1420dce7f"},"source":["model.fit(X_train, train_y,\n","          batch_size=batch_size,\n","          epochs=epochs,\n","          verbose=1,\n","          validation_data=(X_test, test_y),\n","          shuffle=True)\n"],"execution_count":15,"outputs":[{"output_type":"stream","text":["Epoch 1/500\n","18/18 [==============================] - 19s 1s/step - loss: 1.8338 - accuracy: 0.2007\n","Epoch 2/500\n","18/18 [==============================] - 19s 1s/step - loss: 1.8283 - accuracy: 0.2310\n","Epoch 3/500\n","18/18 [==============================] - 19s 1s/step - loss: 1.8207 - accuracy: 0.2096\n","Epoch 4/500\n","18/18 [==============================] - 19s 1s/step - loss: 1.8186 - accuracy: 0.2302\n","Epoch 5/500\n","18/18 [==============================] - 19s 1s/step - loss: 1.8107 - accuracy: 0.2212\n","Epoch 6/500\n"," 2/18 [==>...........................] - ETA: 9s - loss: 1.8201 - accuracy: 0.2422"],"name":"stdout"},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-15-e474293a30ca>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m           \u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m           \u001b[0mvalidation_data\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_y\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m           shuffle=True)\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/training.py\u001b[0m in \u001b[0;36m_method_wrapper\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    106\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m_method_wrapper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    107\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_in_multi_worker_mode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint: disable=protected-access\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 108\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    109\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    110\u001b[0m     \u001b[0;31m# Running inside `run_distribute_coordinator` already.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/training.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1096\u001b[0m                 batch_size=batch_size):\n\u001b[1;32m   1097\u001b[0m               \u001b[0mcallbacks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_train_batch_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1098\u001b[0;31m               \u001b[0mtmp_logs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1099\u001b[0m               \u001b[0;32mif\u001b[0m \u001b[0mdata_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshould_sync\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1100\u001b[0m                 \u001b[0mcontext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masync_wait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    778\u001b[0m       \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    779\u001b[0m         \u001b[0mcompiler\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"nonXla\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 780\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    781\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    782\u001b[0m       \u001b[0mnew_tracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m_call\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    805\u001b[0m       \u001b[0;31m# In this case we have created variables on the first call, so we run the\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    806\u001b[0m       \u001b[0;31m# defunned version which is guaranteed to never create variables.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 807\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateless_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# pylint: disable=not-callable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    808\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateful_fn\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    809\u001b[0m       \u001b[0;31m# Release the lock early so that multiple threads can perform the call\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   2827\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_lock\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2828\u001b[0m       \u001b[0mgraph_function\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_maybe_define_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2829\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mgraph_function\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_filtered_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# pylint: disable=protected-access\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2830\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2831\u001b[0m   \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m_filtered_call\u001b[0;34m(self, args, kwargs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1846\u001b[0m                            resource_variable_ops.BaseResourceVariable))],\n\u001b[1;32m   1847\u001b[0m         \u001b[0mcaptured_inputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcaptured_inputs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1848\u001b[0;31m         cancellation_manager=cancellation_manager)\n\u001b[0m\u001b[1;32m   1849\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1850\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m_call_flat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcaptured_inputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcancellation_manager\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m_call_flat\u001b[0;34m(self, args, captured_inputs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1922\u001b[0m       \u001b[0;31m# No tape is watching; skip to running the function.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1923\u001b[0m       return self._build_call_outputs(self._inference_function.call(\n\u001b[0;32m-> 1924\u001b[0;31m           ctx, args, cancellation_manager=cancellation_manager))\n\u001b[0m\u001b[1;32m   1925\u001b[0m     forward_backward = self._select_forward_and_backward_functions(\n\u001b[1;32m   1926\u001b[0m         \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36mcall\u001b[0;34m(self, ctx, args, cancellation_manager)\u001b[0m\n\u001b[1;32m    548\u001b[0m               \u001b[0minputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    549\u001b[0m               \u001b[0mattrs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mattrs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 550\u001b[0;31m               ctx=ctx)\n\u001b[0m\u001b[1;32m    551\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    552\u001b[0m           outputs = execute.execute_with_cancellation(\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/eager/execute.py\u001b[0m in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     58\u001b[0m     \u001b[0mctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mensure_initialized\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     59\u001b[0m     tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n\u001b[0;32m---> 60\u001b[0;31m                                         inputs, attrs, num_outputs)\n\u001b[0m\u001b[1;32m     61\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"markdown","metadata":{"id":"5tEMypcIHFCe","colab_type":"text"},"source":["# **Saving the Trained Model**"]},{"cell_type":"code","metadata":{"id":"cj8GkHrpHD3S","colab_type":"code","colab":{}},"source":["fer_json = model.to_json()\n","with open(\"MyPro.json\", \"w\") as json_file:\n","    json_file.write(fer_json)\n","model.save_weights(\"MyPro.h5\")"],"execution_count":null,"outputs":[]}]}